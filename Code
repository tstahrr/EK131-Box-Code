#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x20,20,4); 

#define NOTE_E5  659
#define NOTE_G5  784
#define NOTE_G6  1568

#define buzzer 11 

int sensorPin = A0;  

int LED = 2;


int melody[] = {
  NOTE_E5, NOTE_E5, NOTE_E5, NOTE_G6, NOTE_E5, NOTE_G5
};


int tempo[] = {
  12, 12, 12, 12, 12, 12,
};



void setup()
{

  pinMode(11, OUTPUT);
  sing(1); 
  
  lcd.init();                      
 
  lcd.backlight();
  lcd.setCursor(5,0);
  lcd.print("Welcome");
  lcd.setCursor(1,1);
  lcd.print("Let's - a - Go!");
}

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define LED 2
#define buzzer 11


const int stepsPerRevolution = 2048;
const int rolePerMinute = 15;


void loop()
{

  int reading = analogRead(sensorPin);
  float voltage = (reading * 5.0)/1024;

  Serial.print(voltage); 
  Serial.println(" volts");

  float temperatureC = (voltage - 0.5) * 100;

  Serial.print(temperatureC); 
  Serial.println(" degrees C");

  float temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;

  Serial.print(temperatureF); 
  Serial.println(" degrees F");

  delay(1000);

  lcd.backlight();
  lcd.setCursor(1,0);
  lcd.print(" Temperature: ");
  lcd.setCursor(1,1);
  lcd.print(temperatureC);
  lcd.print(" C ");
  lcd.print(temperatureF);
  lcd.print(" F");

  delay(500);

  if (temperatureF < 70 || temperatureF > 75)
    {
    digitalWrite(LED, HIGH);
    delay(500);
    digitalWrite(LED, LOW);
    delay(500);
    tone(buzzer, 1000);
    delay(1000);
    noTone(buzzer);
    delay(1000);
 }
  else
 {
    digitalWrite(LED, LOW);
    digitalWrite(buzzer, LOW);
 }
}


int song = 1;



void sing(int s) {
  // iterate over the notes of the melody:
  song = s;
  if (song == 1) {

    Serial.println(" 'Mario Theme'");
    int size = sizeof(melody) / sizeof(int);

int thisNote = 0;  


      int noteDuration = 1000 / tempo[thisNote];

      buzz(buzzer, melody[thisNote], noteDuration);

      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);

      buzz(buzzer, 0, noteDuration);

      thisNote++;

      buzz(buzzer, melody[thisNote], noteDuration);

      pauseBetweenNotes = noteDuration * 2.00;
      delay(pauseBetweenNotes);

      buzz(buzzer, 0, noteDuration);

      thisNote++;

      buzz(buzzer, melody[thisNote], noteDuration);

      pauseBetweenNotes = noteDuration * 2.00;
      delay(pauseBetweenNotes);

      buzz(buzzer, 0, noteDuration);

      thisNote++;

      buzz(buzzer, melody[thisNote], noteDuration);

      pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);

      buzz(buzzer, 0, noteDuration);

      thisNote++;

      buzz(buzzer, melody[thisNote], noteDuration);

      pauseBetweenNotes = noteDuration * 2.00;
      delay(pauseBetweenNotes);

      buzz(buzzer, 0, noteDuration);

      thisNote++;

      buzz(buzzer, melody[thisNote], noteDuration);

      pauseBetweenNotes = noteDuration * 1.60;
      delay(pauseBetweenNotes);

      buzz(buzzer, 0, noteDuration);

      thisNote++;

  }
}


void buzz(int targetPin, long frequency, long length) {
  digitalWrite(13, HIGH);
  long delayValue = 1000000 / frequency / 2; // calculate the delay value between transitions
  //// 1 second's worth of microseconds, divided by the frequency, then split in half since
  //// there are two phases to each cycle
  long numCycles = frequency * length / 1000; // calculate the number of cycles for proper timing
  //// multiply frequency, which is really cycles per second, by the number of seconds to
  //// get the total number of cycles to produce
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
    digitalWrite(targetPin, HIGH); // write the buzzer pin high to push out the diaphram
    delayMicroseconds(delayValue); // wait for the calculated delay value
    digitalWrite(targetPin, LOW); // write the buzzer pin low to pull back the diaphram
    delayMicroseconds(delayValue); // wait again or the calculated delay value
  }
  digitalWrite(13, LOW);

}
